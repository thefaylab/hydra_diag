#if !defined(_HYDRA_SIM_)
#  define _HYDRA_SIM_

class model_data : public ad_comm{
  int sim;
  int rseed;
  data_int debug;
  data_int Nyrs;
  data_int Nspecies;
  data_int Nsizebins;
  data_int Nareas;
  data_int Nfleets;
  data_int Nsurveys;
  int Totsizebins;
  int spp;
  int size;
  int area;
  int pred;
  int prey;
  int t;
  int yr;
  int fleet;
  int Nstepsyr;
  int Tottimesteps;
  int yrct;
  int iguild;
  int iassess;
  int ithreshold;
  ivector maxThreshold;
  int Nprey;
  double o;
  data_number wtconv;
  init_adstring datfilename;
  data_matrix binwidth;
  data_vector lenwt_a;
  data_vector lenwt_b;
  dmatrix lbinmax;
  dmatrix lbinmin;
  dmatrix lbinmidpt;
  dmatrix wtbinmax;
  dmatrix wtbinmin;
  dmatrix wtatlbinmidpt;
  dmatrix binavgwt;
  dmatrix powlbinmaxb;
  data_int Nrecruitment_cov;
  data_int Nmaturity_cov;
  data_int Ngrowth_cov;
  data_matrix recruitment_cov;
  data_matrix maturity_cov;
  data_matrix growth_cov;
  data_3array obs_effort;
  data_4array mean_stomwt;
  data_matrix obs_temp;
  data_int yr1Nphase;
  data_int recphase;
  data_int avg_rec_phase;
  data_int recsigmaphase;
  data_int avg_F_phase;
  data_int dev_rec_phase;
  data_int dev_F_phase;
  data_int fqphase;
  data_int sqphase;
  data_int ssig_phase;
  data_int csig_phase;
  data_matrix recGamma_alpha;
  data_matrix recGamma_shape;
  data_matrix recGamma_beta;
  data_matrix recDS_alpha;
  data_matrix recDS_shape;
  data_matrix recDS_beta;
  data_matrix recGamSSB_alpha;
  data_matrix recGamSSB_shape;
  data_matrix recGamSSB_beta;
  data_matrix recRicker_alpha;
  data_matrix recRicker_shape;
  data_matrix recRicker_beta;
  data_matrix recBH_alpha;
  data_matrix recBH_shape;
  data_matrix recBH_beta;
  data_matrix recShepherd_alpha;
  data_matrix recShepherd_shape;
  data_matrix recShepherd_beta;
  data_matrix recHockey_alpha;
  data_matrix recHockey_shape;
  data_matrix recHockey_beta;
  data_matrix recSegmented_alpha;
  data_matrix recSegmented_shape;
  data_matrix recSegmented_beta;
  data_ivector rectype;
  data_ivector stochrec;
  dmatrix rec_alpha;
  dmatrix rec_shape;
  dmatrix rec_beta;
  data_matrix sexratio;
  data_matrix recruitment_covwt;
  data_matrix fecund_d;
  data_matrix fecund_h;
  data_3array fecund_theta;
  d3_array fecundity;
  data_matrix maturity_nu;
  data_matrix maturity_omega;
  data_matrix maturity_covwt;
  dmatrix covariates_M;
  data_matrix growth_psi;
  data_matrix growth_kappa;
  data_matrix growth_covwt;
  data_matrix vonB_Linf;
  data_matrix vonB_k;
  data_ivector growthtype;
  data_number phimax;
  d4_array growthprob_phi;
  dvector delta_t;
  dvector lmax_test;
  double lmax_use;
  data_matrix intake_alpha;
  data_matrix intake_beta;
  d4_array intake;
  data_3array M1;
  data_3array isprey;
  data_matrix preferred_wtratio;
  data_vector sd_sizepref;
  d4_array wtratio;
  d4_array sizepref;
  d4_array suitability;
  data_matrix fishsel_c;
  data_matrix fishsel_d;
  data_matrix B0;
  data_int Nguilds;
  imatrix catchToDiscardsGuild;
  imatrix catchToDiscardsSpecies;
  imatrix maxGuildThreshold;
  imatrix maxSpeciesThreshold;
  data_ivector guildMembers;
  data_ivector fleetMembers;
  data_int AssessmentPeriod;
  dmatrix B0_guilds;
  data_int flagRamp;
  data_vector minExploitation;
  data_vector maxExploitation;
  data_vector minMaxExploitation;
  data_vector minMaxThreshold;
  data_int Nthresholds;
  data_vector threshold_proportion;
  data_vector exploitation_levels;
  data_vector threshold_species;
  data_int AssessmentOn;
  data_int speciesDetection;
  data_int LFI_size;
  data_number scaleInitialN;
  data_number otherFood;
  data_matrix effortScaled;
  data_4array discard_Coef;
  data_4array discardSurvival_Coef;
  data_vector predOrPrey;
  data_int bandwidth_metric;
  data_number baseline_threshold;
  data_3array indicator_fishery_q;
  int Nqpars;
  imatrix f_map;
  imatrix q_map;
  int dum;
  data_vector AR_parameters;
  double rho_AR_Survey;
  double rho_AR_Recruitment;
  double rho_AR_Catch;
  d3_array sim_survey_error;
  d3_array sim_recruit_error;
  d4_array sim_catch_error;
  d3_array sim_extreme_recruit_error;
  data_int flagMSE;
  data_matrix residentTime;
  data_matrix areaMortality;
  data_int eof;
  data_int Nsurvey_obs;
  data_matrix obs_survey_biomass;
  data_int Nsurvey_size_obs;
  data_matrix obs_survey_size;
  data_int Ncatch_obs;
  data_matrix obs_catch_biomass;
  data_int Ncatch_size_obs;
  data_matrix obs_catch_size;
  data_int Ndietprop_obs;
  data_matrix obs_dietprop;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_matrix effort_updated;
  param_3array obs_effortAssess;
  param_init_d3array ln_yr1N;
  param_3array yr1N;
  param_init_matrix recruitment_alpha;
  param_init_matrix recruitment_shape;
  param_init_matrix recruitment_beta;
  param_4array propmature;
  param_3array eggprod;
  param_init_matrix ln_avg_recruitment;
  param_matrix avg_recruitment;
  param_init_d3array recruitment_devs;
  param_3array recruitment;
  param_init_matrix ln_recsigma;
  param_matrix recsigma;
  param_3array rec_procError;
  param_init_matrix avg_F;
  param_init_d3array F_devs;
  param_4array Fyr;
  param_4array suitpreybio;
  param_5array biomass_prey_avail_no_size;
  param_4array N;
  param_4array Narea;
  param_4array Nnotarea;
  param_4array B;
  param_4array F;
  param_4array C;
  param_4array Z;
  param_4array M2;
  param_4array eatN;
  param_4array discardN;
  param_4array otherDead;
  param_4array D;
  param_4array fishsel;
  param_5array Ffl;
  param_5array Dfl;
  param_5array Cfl;
  param_init_vector ln_fishery_q;
  param_3array fishery_q;
  param_3array mean_guild_fishery_q;
  param_matrix mean_fishery_q;
  param_init_matrix ln_survey_q;
  param_matrix survey_q;
  param_3array survey_sel;
  param_init_matrix ln_surv_sigma;
  param_matrix surv_sigma;
  param_3array surv_obsError;
  param_init_d3array ln_catch_sigma;
  param_3array catch_sigma;
  param_4array catch_obsError;
  param_3array avByr;
  param_3array SSB;
  param_3array eaten_biomass;
  param_3array discard_biomass;
  param_3array otherDead_biomass;
  param_3array total_biomass;
  param_4array eaten_biomass_size;
  param_4array discard_biomass_size;
  param_4array otherDead_biomass_size;
  param_4array total_biomass_size;
  param_4array catch_biomass_size;
  param_3array predation_mortality;
  param_3array fishing_mortality;
  param_4array predation_mortality_size;
  param_4array fishing_mortality_size;
  param_3array catch_biomass;
  param_4array fleet_catch_biomass;
  param_4array est_fleet_catch_biomass;
  param_3array est_catch_biomass;
  param_4array est_fleet_catch_guild_biomass;
  param_4array est_fleet_catch_guild_assessment;
  param_3array est_catch_guild_biomass;
  param_3array est_survey_biomass_assessment;
  param_3array est_survey_biomass;
  param_3array est_survey_guild_biomass;
  param_3array est_survey_guild_biomass_assessment;
  param_3array resid_bio;
  param_matrix totcatch_fit;
  param_matrix catchcomp_fit;
  param_matrix totbio_fit;
  param_matrix biocomp_fit;
  param_vector pred_catch_biomass;
  param_vector resid_catch;
  param_vector nll_catch;
  param_vector pred_catch_size;
  param_vector nll_catch_size;
  param_vector pred_survey_index;
  param_vector resid_survey;
  param_vector nll_survey;
  param_vector pred_survey_size;
  param_vector nll_survey_size;
  param_vector pred_dietprop;
  param_vector nll_dietprop;
  param_vector recdev;
  param_vector nll_recruit;
  param_matrix index_Simpsons_N;
  param_matrix index_Simpsons_Nrecip;
  param_matrix index_Simpsons_C;
  param_matrix index_Simpsons_Crecip;
  param_3array index_LFI_Biomass;
  param_3array index_LFI_Catch;
  param_3array index_LFI_N;
  param_matrix LFI_threshold;
  param_vector prob_species;
  param_number LF_Biomass;
  param_vector B_total;
  param_vector B_largestClass;
  param_4array N_tot;
  param_4array B_tot;
  param_4array C_tot;
  param_5array Cfl_tot;
  param_matrix index_predBio;
  param_matrix index_preyBio;
  param_matrix index_predToPreyRatio;
  param_matrix index_plankToPiscRatio;
  param_vector index_catch;
  param_vector index_biomass;
  param_3array index_stdev_catch;
  param_3array index_stdev_biomass;
  param_3array index_ExploitationRate;
  param_matrix index_SystemExploitationRate;
  param_3array exploitation_update;
  param_3array index_status_species;
  param_3array index_status_guild;
  param_matrix exploitationLevelSpecies;
  param_matrix exploitationLevelGuild;
  param_matrix newExploitationLevel;
  param_matrix objfun_areaspp;
  param_3array rec_EventError;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value objfun;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void calc_fishery_qs(void);
  void transform_parameters(void);
  void calc_initial_states(void);
  void calc_update_N(void);
  void calc_recruitment(void);
  void calc_available_N(void);
  void calc_pred_mortality(void);
  void calc_fishing_mortality(void);
  void calc_total_mortality(void);
  void calc_catch_etc(void);
  void calc_pop_dynamics(void);
  void calc_SSB(void);
  void calc_movement(void);
  void calc_survey_abundance(void);
  void calc_health_indices(void);
  void calc_assessment_linear_independent_fleet(void);
  void calc_assessment_equal_fleet(void);
  void calc_assessment_strategy_Step(void);
  void write_simout_KRAKEN(void);
  void write_outDarwin(void);
  void write_outIndices(void);
  void write_outDiagnostics(void);
  void calculate_predicted_values(void);
  void evaluate_the_objective_function(void);

};
#endif
